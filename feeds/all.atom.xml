<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Gauteng Python User Group</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2014-07-04T22:50:00+02:00</updated><entry><title>Meetup: July 2014</title><link href="/meetup-july-2014.html" rel="alternate"></link><updated>2014-07-04T22:50:00+02:00</updated><author><name>Walter</name></author><id>tag:,2014-07-04:meetup-july-2014.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;meetup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Meetup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="n"&gt;venue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gauteng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;joburg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JoziHub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://www.meetup.com/Gauteng-Python-Users-Group/events/193043692/" class="btn btn-success"&gt;&lt;i class="fa fa-check-square"&gt;&lt;/i&gt; RSVP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This will be our fourth monthly meetup. The talks will be short, and are meant
to be conversation starters. Should you not be available for the entire meetup,
you are welcome to come say hi and leave early.&lt;/p&gt;
&lt;p&gt;The following talks will be presented:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Using PL/Python in PostgreSQL&lt;/strong&gt; (Corrie)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testing in Python&lt;/strong&gt; (Iwan)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://jozihub.co.za"&gt;JoziHub&lt;/a&gt; is located at
&lt;a href="http://www.openstreetmap.org/way/162961866#map=18/-26.18514/28.01931"&gt;44 Stanley Ave in Millpark&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Any questions or comments are welcome in the
Google Groups &lt;a href="https://groups.google.com/d/topic/gpugsa/_PwadQSb2VU/discussion"&gt;discussion thread&lt;/a&gt;.&lt;/p&gt;</summary><category term="2014"></category><category term="meetup"></category><category term="talks"></category><category term="postgres"></category><category term="testing"></category></entry><entry><title>Meetup Feedback: June 2014</title><link href="/meetup-feedback-june-2014.html" rel="alternate"></link><updated>2014-07-02T13:00:00+02:00</updated><author><name>Walter</name></author><id>tag:,2014-07-02:meetup-feedback-june-2014.html</id><summary type="html">&lt;p&gt;The meetup was hosted at &lt;a href="http://jozihub.co.za"&gt;JoziHub&lt;/a&gt; on 28 June 2014,
09:00. There was a total of 7 attendees, of which 3 were newcomers.&lt;/p&gt;
&lt;h2&gt;Discussions&lt;/h2&gt;
&lt;p&gt;We started off with informal introductions and a discussion on the purpose of
GPUG. This discussion was continued on our
&lt;a href="https://groups.google.com/d/topic/gpugsa/siOAqwrp-7M"&gt;forums&lt;/a&gt;. During the rest
of these discussions, it came to light that all of our newcomers learned of the
meetup via our &lt;a href="http://www.meetup.com/Gauteng-Python-Users-Group/"&gt;Meetup.com&lt;/a&gt;
page and were unaware of this site and our Google Group. It is clear that we
need to increase the visibility of these other resources.&lt;/p&gt;
&lt;p&gt;Frank was scheduled to present a talk on his accounting software, but a power
outage prevented him from doing so. In stead, he shared his experience with
Python 3.4's &lt;code&gt;asyncio&lt;/code&gt; module and subsequently did a
&lt;a href="/introduction-to-asyncio.html"&gt;writeup&lt;/a&gt; on the topic.&lt;/p&gt;
&lt;p&gt;Walter presented an introduction to MongoDB, &lt;code&gt;pymongo&lt;/code&gt; and MongoEngine. The
IPython notebook and slides were committed to our
&lt;a href="https://github.com/gautengpug/talks/tree/master/2014/june_meetup/pymongo_intro"&gt;talks repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Based on the pursuant discussions, Corrie's experience with PL/Python in
PostgreSQL and Iwan's testing experience was identified as valuable topics for
future talks.&lt;/p&gt;
&lt;p&gt;The meetup adjourned at about 12:30. Thanks to all attendees, and to JoziHub
for providing the venue.&lt;/p&gt;</summary><category term="2014"></category><category term="meetup"></category><category term="talks"></category><category term="mongodb"></category><category term="asyncio"></category></entry><entry><title>Introduction to asyncio</title><link href="/introduction-to-asyncio.html" rel="alternate"></link><updated>2014-06-29T12:18:00+02:00</updated><author><name>Frank Millman</name></author><id>tag:,2014-06-29:introduction-to-asyncio.html</id><summary type="html">&lt;h1&gt;Introduction to &lt;code&gt;asyncio&lt;/code&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;-- &lt;cite&gt;Frank Millman&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you are writing a server program to handle multiple concurrent connections,
how do you allow the connections to be handled simultaneously without blocking?
There are two main approaches.&lt;/p&gt;
&lt;p&gt;The traditional approach uses threads. The main thread runs an endless loop
listening for incoming connections. For each connection received, it creates a
separate thread to handle the connection, and resumes listening. The secondary
thread reads data from the socket and handles it as required, until one side or
the other closes the connection. It runs independently of any other thread, so
it does not have to worry about blocking. It works, but it has two main
disadvantages. Firstly, the operating system limits the number of threads
allowed, so it limits the number of concurrent connections achievable.
Secondly, the operating system switches control between threads arbitrarily,
and the programmer has no control over this. This can lead to subtle bugs,
especially if any state is shared between the threads. This can be managed with
the use of locks and other mechanisms, but if you get it wrong it can be very
hard to debug.&lt;/p&gt;
&lt;p&gt;An alternative approach is to use asynchronous I/O. The most popular one in
Python has for some years been a 3rd-party package called
&lt;a href="https://twistedmatrix.com/"&gt;Twisted&lt;/a&gt;. It also uses an endless loop to listen
for incoming connections, but when one is received it passes control directly
to a request handler within the main thread. The handler reads the data from
the socket, and then handles it up to a point where it might block. At that
point it must do three things. It must define some condition indicating what it
is waiting, it must specify a function to be called when that condition is
satisfied, and it must return, which passes control back to the main loop. In
addition to listening for incoming connections, the main loop also checks all
outstanding conditions. If it finds one that is satisfied, it calls the
specified function so that the handler can continue with its processing. It
sounds complicated, but in practice the majority of current connections are in
a blocked state, so it can handle many connections simultaneously without a
problem. This approach has two main advantages. Firstly, there is no physical
limit to the number of concurrent connections allowed, and many thousands have
been successfully achieved.  Secondly, it is up to each handler to decide when
to relinquish control, so it is easier for handlers to share data safely
without the need for locks.  However, there is a disadvantage - if a handler
does not relinquish control when it is supposed to, the result is that the main
loop cannot continue, and the entire program will appear to have frozen.
Handling this correctly is a skill that comes with experience.&lt;/p&gt;
&lt;p&gt;Python has now introduced its own asynchronous I/O capability. It is called
&lt;a href="https://docs.python.org/3.4/library/asyncio.html"&gt;asyncio&lt;/a&gt;, and it is included
in release 3.4. It is similar to the Twisted approach described above, but
there are some important differences. To explain them, a bit of history is
required.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;yield&lt;/code&gt; statement was introduced in Python 2.2. Assume a function that
returns more than one result -&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fetch_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row_no&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch_row&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_no&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The caller would do something like -&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This works, but the caller has to wait until all rows are retrieved before
continuing. In the first line, &lt;code&gt;fetch_rows()&lt;/code&gt; returns a list, and the second
line iterates over the list.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;yield&lt;/code&gt; statement allows the following -&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fetch_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row_no&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch_row&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_no&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The caller looks the same as before, but the sequence of events is different.
The &lt;code&gt;yield&lt;/code&gt; statement turns the function into a generator. In the first line,
&lt;code&gt;fetch_rows()&lt;/code&gt; returns a &lt;em&gt;generator object&lt;/em&gt;. No lines in &lt;code&gt;fetch_rows()&lt;/code&gt; are
executed yet. The second line iterates over the generator. For the first
iteration, &lt;code&gt;fetch_rows()&lt;/code&gt; is executed from the first line up to the first
&lt;code&gt;yield&lt;/code&gt; statement. The value is returned to the caller, but &lt;code&gt;fetch_rows()&lt;/code&gt;
stays open.  Each subsequent iteration causes &lt;code&gt;fetch_rows()&lt;/code&gt; to continue from
the line after the &lt;code&gt;yield&lt;/code&gt; until the next &lt;code&gt;yield&lt;/code&gt;, or until the function
reaches the end, in which case it raises &lt;code&gt;StopIteration&lt;/code&gt;. The benefit is that
the caller can process each row as it is retrieved, instead of waiting for them
all to be retrieved.  It also avoids the need to create a list in memory.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;yield from&lt;/code&gt; statement was introduced in Python 3.3. I cheated here - the
following description is taken directly from the Python
&lt;a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380"&gt;manual&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;yield from&lt;/code&gt; expression allows a generator to delegate part of its
operations to another generator. This allows a section of code containing yield
to be factored out and placed in another generator. Additionally, the
subgenerator is allowed to return with a value, and the value is made available
to the delegating generator.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[...]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For simple iterators, &lt;code&gt;yield from iterable&lt;/code&gt; is essentially just a shortened
form of &lt;code&gt;for item in iterable: yield item&lt;/code&gt;. &lt;em&gt;[...]&lt;/em&gt; However, unlike an
ordinary loop, &lt;code&gt;yield from&lt;/code&gt; allows subgenerators to receive sent and thrown
values directly from the calling scope, and return a final value to the outer
generator.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you want to learn more, you can read the following -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://legacy.python.org/dev/peps/pep-0255/"&gt;PEP 255&lt;/a&gt; - Simple Generators&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The proposal for adding generators and the &lt;code&gt;yield&lt;/code&gt; statement to Python.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://legacy.python.org/dev/peps/pep-0342/"&gt;PEP 342&lt;/a&gt; - Coroutines via
  Enhanced Generators&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The proposal to enhance the API and syntax of generators, making them usable
as simple coroutines.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://legacy.python.org/dev/peps/pep-0380/"&gt;PEP 380&lt;/a&gt; - Syntax for
  Delegating to a Subgenerator&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The proposal to introduce the &lt;code&gt;yield_from&lt;/code&gt; syntax, making delegation to
sub-generators easy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;asyncio&lt;/code&gt; module was introduced in Python 3.4. From the
&lt;a href="https://docs.python.org/3.4/library/asyncio.html"&gt;manual&lt;/a&gt;, it &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;provides infrastructure for writing single-threaded concurrent code using
coroutines, multiplexing I/O access over sockets and other resources, running
network clients and servers, and other related primitives.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The big difference between Twisted and &lt;code&gt;asyncio&lt;/code&gt; is that the latter makes
extensive use of the &lt;code&gt;yield from&lt;/code&gt; statement. In Twisted you have to specify a
callback function to be called when the condition is satisfied, and then
return. With &lt;code&gt;asyncio&lt;/code&gt; you can use callbacks in the same way, but it is easier
to just call &lt;code&gt;yield from&lt;/code&gt;, and your function is automatically suspended. When
the condition is satisfied it continues from the next statement. This makes
programs much easier to read and to write.&lt;/p&gt;
&lt;p&gt;Here is a simple example of an echo server -&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;accept_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client_writer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;handle_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client_writer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coroutine&lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client_writer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;client_reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;client_writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;BYE&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accept_client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For a fuller example, look at &lt;a href="http://davebehnke.com/python-asyncio-streams-client-server.html"&gt;Python AsyncIO - Streams - Client and
Server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have only scratched the surface, but I have got it working in my project.
There is a bit of a learning curve to get your head around the concepts, but
most of it &lt;em&gt;just works&lt;/em&gt;. The problem I found is that if something does not
work, it can be tricky to reason out what is happening. Here is one gotcha that
caught me.&lt;/p&gt;
&lt;p&gt;Some of my request handlers are quite complex, so I have refactored them by
splitting them up into smaller functions. If a function needed to block, I
added a &lt;code&gt;yield from&lt;/code&gt; statement, but then I found that the handler returned
prematurely without doing anything. After much investigation, I found that
adding &lt;code&gt;yield from&lt;/code&gt; changes the function into a generator (or more strictly, a
coroutine). As explained above, calling a generator simply returns a generator
object, but it does not execute anything. So I tried using &lt;code&gt;yield from&lt;/code&gt; in the
caller, but this changed &lt;em&gt;it&lt;/em&gt; into a coroutine, so I found I had to change
every function in the chain into a coroutine by adding the &lt;code&gt;@asyncio.coroutine&lt;/code&gt;
decorator you can see above to each function, and then invoke it by using
&lt;code&gt;yield from&lt;/code&gt;. Then everything worked.&lt;/p&gt;</summary><category term="2014"></category><category term="asyncio"></category></entry><entry><title>Meetup: June 2014</title><link href="/meetup-june-2014.html" rel="alternate"></link><updated>2014-06-17T21:47:00+02:00</updated><author><name>Walter</name></author><id>tag:,2014-06-17:meetup-june-2014.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;meetup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Meetup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="n"&gt;venue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gauteng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;joburg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JoziHub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will be our third monthly meetup. The following talks will be presented:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;&lt;strong&gt;Python and Excel Integration Using PyXll&lt;/strong&gt; (Tobie)&lt;/s&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Development of Account Software&lt;/strong&gt; (Frank)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Introduction to MongoDB in Python&lt;/strong&gt; (Walter)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;RSVP: &lt;a href="http://www.meetup.com/Gauteng-Python-Users-Group/events/189529862/"&gt;Meetup page&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://jozihub.co.za"&gt;JoziHub&lt;/a&gt; is located at
&lt;a href="http://www.openstreetmap.org/way/162961866#map=18/-26.18514/28.01931"&gt;44 Stanley Ave in Millpark&lt;/a&gt;.
We have the venue until 14:00, but we might not go on that long.&lt;/p&gt;
&lt;p&gt;Feel free to discuss or ask questions on the relevant
&lt;a href="https://groups.google.com/forum/?hl=en-GB#!topic/gpugsa/ui0o6YcJj1I"&gt;Google Groups page&lt;/a&gt;.&lt;/p&gt;</summary><category term="2014"></category><category term="meetup"></category><category term="talks"></category><category term="mongodb"></category><category term="pyxll"></category></entry><entry><title>2nd Meetup: May 2014</title><link href="/2nd-meetup-may-2014.html" rel="alternate"></link><updated>2014-05-31T13:00:00+02:00</updated><author><name>Hussain</name></author><id>tag:,2014-05-31:2nd-meetup-may-2014.html</id><summary type="html">&lt;p&gt;Our second meetup was held on 17 May at the House4Hack.&lt;/p&gt;
&lt;p&gt;We were expecting an attendance of 5 confirmed pythonistas, with any others that aren't that familiar with our group yet, to come through as well.&lt;/p&gt;
&lt;p&gt;Unfortunately 2 members couldn't make it, so we were 3 pythonistas, with Gert being the *wildcard attendee (this proved to be an insightful activity, as Gert shared some interesting knowledge with us, but more on that later).&lt;/p&gt;
&lt;h3&gt;We had 3 presentations (+ informal discussion) conducted on the day. These were:&lt;/h3&gt;
&lt;h3&gt;Frank - Presenting his accounting package:&lt;/h3&gt;
&lt;p&gt;I learnt a lot from Franks software presentation. Although the presentation was broken in 2, with being shown a demo initially (with some discussion about the software) and being given a more detailed overview at the end of the meetup.&lt;/p&gt;
&lt;p&gt;Frank demonstrated how his accounting package went from a desktop application using a GUI, to a web-based application that is unlike any other you've seen.&lt;/p&gt;
&lt;p&gt;Although it may at first seem like the application is relatively simple, we quickly learnt that what is "under the hood" in the software is some very powerful stuff.&lt;/p&gt;
&lt;p&gt;Frank demonstrated how he had basically written every part of the software ("vanilla" style), which means that a lot of what you might expect from a web-framework, was written by Frank himself.&lt;/p&gt;
&lt;p&gt;(I stand to be corrected on this) The software works through multiple threads, so if it crashes on 1 client, it will continue to work on others. We also learnt that the application works similar to an SPA (Single Page Application), with a variety of menu windows popping up per-request (and not through being hard-coded).&lt;/p&gt;
&lt;p&gt;The software also had some other parts that I haven't quite wrapped my mind around yet, so it was a great way to discover that even with an application that would seem as simple as CRUD, that a lot of work is going on in the back.&lt;/p&gt;
&lt;p&gt;I also suggested that Frank consider separating the concerns of the application from what is happening "underneath", so that he could fine-tune the framework-esque part to be more generic and let the accounting software run on top of it. We will see what Frank has to say about that at a future meetup.&lt;/p&gt;
&lt;p&gt;Lastly, as a word of encouragement, I would like to tell Frank that his application is definitely well beyond "vaporware" and the extensive work he has put in to build the application will bear fruits soon.&lt;/p&gt;
&lt;h3&gt;Nelis - Presenting &lt;a href="http://tooblippe.github.io/insightstack-blog/2014/05/05/decorators/"&gt;Decorators&lt;/a&gt; within iPython:&lt;/h3&gt;
&lt;p&gt;Although I cannot give much detail into the technical part of using decorators (as I am still trying to understand them and their application), the talk by Nelis was very enlightening and informative.&lt;/p&gt;
&lt;p&gt;(I stand to be corrected) Decorators are used for pre- and post-processing.&lt;/p&gt;
&lt;p&gt;Nelis explained to us the use-case of decorators in his situation, where data needs to be flattened and then reshaped 10-12 times. The use of a decorator eliminates redundancy and maintenance, as you will not need to maintain 10-12 pieces of the same code.&lt;/p&gt;
&lt;p&gt;The talk itself was also very well presented by Nelis (he lectures part-time, so we got to experience a thorough explanation of what is happening).&lt;/p&gt;
&lt;p&gt;We also got to experience all this using iPython, which is proving to be a very popular and useful tool among data scientists.&lt;/p&gt;
&lt;p&gt;Although I haven't yet tested it out for myself, you can expect to see a simple attendance graph being drawn with one of the graph libraries iPython provides :P&lt;/p&gt;
&lt;h3&gt;Hussain - &lt;a href="https://github.com/utahta/pythonbrew"&gt;Pythonbrew&lt;/a&gt; and &lt;a href="https://github.com/scrapinghub/portia"&gt;Portia&lt;/a&gt;:&lt;/h3&gt;
&lt;p&gt;My presentation was split into 2, with the first part being a "install at home" for Pythonbrew(http://gautengpug.github.io/how-to-install-pythonbrew.html) and then doing some visual web-scraping with Portia.&lt;/p&gt;
&lt;p&gt;I have spoken at length about the merits of pythonbrew, but unfortunately the package has been deprecated for about a year now, and the Python Foundation has backed Pyenv as the option for virtual python environments in Python3 (Frank showed me the documentation that speaks about this).&lt;/p&gt;
&lt;p&gt;I demonstrated using Portia by firstly explaining how to install it within a virtual environment (that was created within pythonbrew). Although I didn't get much time to test out Portia myself(I had a nightmare laptop issue 2 days before the presentation), I did manage to demo the basic steps involved in using the visual web-scraping tool.&lt;/p&gt;
&lt;p&gt;This tool is pretty useful for any number of activities and simplifies web-scraping for most people. I would think it is especially useful for data scientists trying to extract data from a website that doesn't have an API (eg. government data that is accessuble to the public).&lt;/p&gt;
&lt;h3&gt;Gert - Scaling, massive datasets, SSDs, Go-lang (and some Ruby):&lt;/h3&gt;
&lt;p&gt;Although Gert was attending primarily to help open/close H4H for us, we did have a great informal discussion with him about a variety of topics.&lt;/p&gt;
&lt;p&gt;Gert explained to us how his team does tests at the H4H on an SSD-run PC/server. Their datasets are so huge that it takes 6+ hours to process.&lt;/p&gt;
&lt;p&gt;We also discovered how most CRUD-based webapps have bottlenecks that aren't the CPU. I/O (Input/Output) being one of those bottlenecks, Gert explained how they approach this issue with a single-threaded, event-driven model.&lt;/p&gt;
&lt;p&gt;There was also some mention of the C10K problem and how a Clojure server experimentally tested 1 million concurrent connections (we will need a reference on that one Gert!).&lt;/p&gt;
&lt;h3&gt;Future Meetups and other matters:&lt;/h3&gt;
&lt;p&gt;Although the attendance shrunk a bit this time (in percentage terms, we're talking double-digits!), this was partly due to poor marketing (some may also refer to this as "Growth Hacking") of the event after the first meetup.&lt;/p&gt;
&lt;p&gt;Luckily, Tobie has stepped in with a meetup.com group (http://www.meetup.com/Gauteng-Python-Users-Group/) and we have seen interest grow from a handle of users to almost 30 now!&lt;/p&gt;
&lt;p&gt;Also, due to the info provided on the meetup group, we may also see the event being moved to our city neighbours (Joburg), as most of the members are based there (we still &amp;lt;3 you H4H).&lt;/p&gt;
&lt;p&gt;Most of the event planning will now happen within the G-Group and the meetup site (sadly, this also signals the end of our experiment with static meetup attendance using github).&lt;/p&gt;
&lt;p&gt;The next scheduled meetup will likely be held on: 21 June 2014.
Location/Venue and time will be decided (with location most likely shifting to Johannesburg) soon, so keep in touch via the G-Group or the meetup.com-Group.&lt;/p&gt;
&lt;p&gt;Lastly, if you'd like to contribute to the site by writing on something interesting, all you need to do is to do your write-up in Markdown and email it to me (I will then publish it for you).&lt;/p&gt;
&lt;p&gt;If you'd like to see how Markdown is written for this blog, see here:&lt;/p&gt;
&lt;p&gt;https://github.com/gautengpug/site_generate/blob/master/content/Blog%20Post%201.md&lt;/p&gt;
&lt;p&gt;Click on "Raw" on the right side of the screen to see the actual Markdown text.&lt;/p&gt;</summary><category term="2014"></category><category term="meetup"></category><category term="talks"></category><category term="pythonbrew"></category><category term="portia"></category><category term="accounting"></category><category term="decorators"></category><category term="ipython"></category></entry><entry><title>How to install Pythonbrew</title><link href="/how-to-install-pythonbrew.html" rel="alternate"></link><updated>2014-05-16T02:00:00+02:00</updated><author><name>Hussain</name></author><id>tag:,2014-05-16:how-to-install-pythonbrew.html</id><summary type="html">&lt;p&gt;Here is a quick guide to installing pythonbrew. It is taken from:&lt;/p&gt;
&lt;p&gt;https://github.com/utahta/pythonbrew&lt;/p&gt;
&lt;p&gt;Although I understand that the project is deprecated, I'm sure it will be very useful to all of you, especially if you are doing multiple things on different python versions.&lt;/p&gt;
&lt;p&gt;This installation is leaning towards the *nix users in our group. This installation guide should work with most linux flavours (with a couple of shell-command changes if required) and possibly with OSX too (Apple guys).&lt;/p&gt;
&lt;p&gt;Go ahead and open a terminal/shell-command and type this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;kL&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//xrl.us/pythonbrewinstall | bash&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will find a .pythonbrew folder (most likely in your $USER).&lt;/p&gt;
&lt;p&gt;Within the same directory .pythonbrew is, look for a .bashrc file. Open this file and at the end of the file, type this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[[&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pythonbrew&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bashrc&lt;/span&gt; &lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pythonbrew&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bashrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command worked for me (on an old install). You could also try changing HOME to the name of the USER.&lt;/p&gt;
&lt;p&gt;So for example, if your username on your system is "Jonny", the line above will look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[[&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Jonny&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pythonbrew&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bashrc&lt;/span&gt; &lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Jonny&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pythonbrew&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bashrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's add the latest Python 2.7 to the list of Pythons...&lt;/p&gt;
&lt;p&gt;Go to this file: pythonbrew/etc/config.cfg&lt;/p&gt;
&lt;p&gt;Open this file and go to line 170-175. You should see 2.7.5 as the last 2.7 version. Add this code and this is how it will look:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[Python-2.7.5]&lt;/span&gt;
&lt;span class="na"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http://www.python.org/ftp/python/2.7.5/Python-2.7.5.tgz&lt;/span&gt;

&lt;span class="k"&gt;[Python-2.7.6]&lt;/span&gt;
&lt;span class="na"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http://www.python.org/ftp/python/2.7.6/Python-2.7.6.tgz&lt;/span&gt;
&lt;span class="na"&gt;latest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Start a fresh terminal/shell.&lt;/p&gt;
&lt;p&gt;Now it's time to install pythonbrew with pip included. Just run this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pythonbrew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;--with-zlib&amp;quot;&lt;/span&gt; &lt;span class="mf"&gt;2.7.6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will take a while (unless you're using a 10MB/s or faster connection) so you can chill as it fetches 2.7.6 and installs it.&lt;/p&gt;
&lt;p&gt;If the install is a success, you can close the current terminal and open a fresh one. Then type this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pythonbrew&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="mf"&gt;2.7.6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will keep 2.7.6 as the persistent python on your system. You can test it out by typing "python" in the terminal and it should tell you the version number.&lt;/p&gt;
&lt;p&gt;Phewww!!! We're almost there!&lt;/p&gt;
&lt;p&gt;Let's now create a virtual environment...&lt;/p&gt;
&lt;p&gt;Type this in the terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pythonbrew&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
&lt;span class="n"&gt;pythonbrew&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;gpug&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can then go ahead and install anything you like in this virtual environment. If you'd like to try out our site-blog, you can do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pythonbrew&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;gpug&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Clone our &lt;a href="https://github.com/gautengpug/site_generate"&gt;site_generate&lt;/a&gt; and &lt;a href="https://github.com/gautengpug/gautengpug.github.io"&gt;gautengpug.github.io&lt;/a&gt; and you'll have your dev environment setup.&lt;/p&gt;
&lt;p&gt;If you're having problems installing pythonbrew, contact me via email and we can chat on Skype. I will help with whatever issues you're having.&lt;/p&gt;
&lt;p&gt;Also, I recommend you install this at home(before the meetup) as Python is around 16MB and if too many people try installing it on the day, it will take a long while to download.&lt;/p&gt;</summary><category term="2014"></category><category term="talks"></category><category term="pythonbrew"></category></entry><entry><title>1st Meetup: April 2014</title><link href="/1st-meetup-april-2014.html" rel="alternate"></link><updated>2014-04-19T13:00:00+02:00</updated><author><name>Hussain</name></author><id>tag:,2014-04-19:1st-meetup-april-2014.html</id><summary type="html">&lt;p&gt;The day was 12 April 2014 and the location was the House4Hack in Centurion.&lt;/p&gt;
&lt;p&gt;After some quick discussions in the somewhat slow-moving GPUG group, the first ever Python meetup was to be hosted in Gauteng!&lt;/p&gt;
&lt;h3&gt;After some basic introductions and setup, we had 2 topics planned for the day:&lt;/h3&gt;
&lt;h4&gt;First up: Tobie presenting a talk on &lt;a href="http://ipython.org/"&gt;iPython&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Tobie showed us how versatile iPython is, with a variety of demos. I especially enjoyed the 3D modelling from data and combining iPython with statistical packages.&lt;/p&gt;
&lt;p&gt;Tobie would like to encourage the use of Python at work, especially as it blows Excel out of the water in functionality! We're rooting for you in that regard Tobie!&lt;/p&gt;
&lt;h4&gt;Second topic: Iwan presenting a talk on a home-grown web-framework&lt;/h4&gt;
&lt;p&gt;The &lt;a href="http://www.reahl.org/"&gt;Reahl web-framework&lt;/a&gt; is quite fascinating in that you can build your webapp in Python!&lt;/p&gt;
&lt;p&gt;We have many Django/Flask/other-web-framework users in GPUG, so this framework is quite relevant to a lot of us.&lt;/p&gt;
&lt;p&gt;Iwan decided to take us through a couple of demos. Unfortunately, my virtualbox with DamnSmallLinux kept crashing on me so I couldn't get to run the code :(&lt;/p&gt;
&lt;p&gt;Most of the guys did manage to get their systems running with the code, but we did lose out on a bit of time with system setup.&lt;/p&gt;
&lt;h3&gt;About the &lt;a href="http://www.house4hack.co.za/"&gt;House4Hack&lt;/a&gt;:&lt;/h3&gt;
&lt;p&gt;H4H is an awesome venue. A bit hard to find if it is your first time, but a pretty awesome hackerspace.&lt;/p&gt;
&lt;p&gt;It has everything a pythonista would need, so all you'd require is your laptop and charger (maybe a double-pin plug in case!).&lt;/p&gt;
&lt;p&gt;Our next meetup is scheduled for 17 May 2014, starting at 13.00 or 13.30.&lt;/p&gt;
&lt;p&gt;We look forward to seeing more people come through at the next event.&lt;/p&gt;</summary><category term="2014"></category><category term="meetup"></category><category term="talks"></category><category term="ipython"></category><category term="reahl"></category></entry></feed>